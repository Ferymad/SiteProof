import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';

interface TranscriptionResult {
  id: string;
  originalText: string;
  finalText: string;
  confidence: number;
  createdAt: string;
  duration?: number;
  status: string;
  hasAudio: boolean;
}

export default function ResultsPage() {
  const [results, setResults] = useState<TranscriptionResult[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadResults();
  }, []);

  const loadResults = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/results');
      
      if (!response.ok) {
        throw new Error('Failed to load results');
      }
      
      const data = await response.json();
      setResults(data.results || []);
      setError(null);
    } catch (err) {
      console.error('Error loading results:', err);
      setError('Failed to load results');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  const formatDuration = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const downloadTranscription = (result: TranscriptionResult) => {
    const content = `Transcription Results
===================

Original Audio: ${result.id}
Date: ${formatDate(result.createdAt)}
Duration: ${result.duration ? formatDuration(result.duration) : 'Unknown'}
Confidence: ${result.confidence}%

Final Transcription:
${result.finalText}

---
Generated by BMAD Construction Transcription System`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `transcription-${result.id}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Head>
          <title>Results - BMAD Transcription</title>
        </Head>
        
        <div className="container mx-auto px-4 py-8">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading your transcription results...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Head>
        <title>Transcription Results - BMAD Construction</title>
        <meta name="description" content="View and download your completed transcriptions" />
      </Head>

      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Navigation Header */}
        <div className="flex justify-between items-center mb-6">
          <Link href="/" className="flex items-center text-gray-600 hover:text-gray-800 transition-colors">
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7" />
            </svg>
            Back to Home
          </Link>
          
          <Link href="/upload" className="flex items-center text-blue-600 hover:text-blue-800 transition-colors">
            üéôÔ∏è Upload New Audio
            <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7" />
            </svg>
          </Link>
        </div>
        
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            üìä Transcription Results
          </h1>
          
          <p className="text-gray-600">
            View, download, and manage your completed audio transcriptions
          </p>
        </div>

        {/* Error state */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <p className="text-red-800">‚ùå {error}</p>
            <button 
              onClick={loadResults}
              className="mt-2 text-red-600 hover:text-red-800 underline"
            >
              Try again
            </button>
          </div>
        )}

        {/* Empty state */}
        {!loading && !error && results.length === 0 && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üéôÔ∏è</div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              No transcriptions yet
            </h2>
            <p className="text-gray-600 mb-6">
              Upload your first audio file to get started with AI-powered transcription
            </p>
            <Link href="/upload" className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg font-medium transition-colors">
              Upload Audio File
            </Link>
          </div>
        )}

        {/* Results list */}
        {results.length > 0 && (
          <div className="space-y-6">
            <div className="text-sm text-gray-600 mb-4">
              Showing {results.length} transcription{results.length !== 1 ? 's' : ''}
            </div>

            {results.map((result) => (
              <div key={result.id} className="bg-white rounded-lg shadow-lg p-6">
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  {/* Left: Metadata */}
                  <div className="lg:col-span-1">
                    <div className="flex items-start justify-between mb-4">
                      <div>
                        <h3 className="font-semibold text-gray-900 mb-1">
                          {formatDate(result.createdAt)}
                        </h3>
                        <p className="text-sm text-gray-600">
                          ID: {result.id.substring(0, 8)}...
                        </p>
                      </div>
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                        result.status === 'validated' 
                          ? 'bg-green-100 text-green-800'
                          : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {result.status}
                      </span>
                    </div>

                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Confidence:</span>
                        <span className={`font-medium ${
                          result.confidence >= 80 ? 'text-green-600' :
                          result.confidence >= 60 ? 'text-yellow-600' : 'text-red-600'
                        }`}>
                          {result.confidence}%
                        </span>
                      </div>
                      
                      {result.duration && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Duration:</span>
                          <span className="font-medium">{formatDuration(result.duration)}</span>
                        </div>
                      )}

                      <div className="flex justify-between">
                        <span className="text-gray-600">Audio:</span>
                        <span className={`font-medium ${result.hasAudio ? 'text-green-600' : 'text-gray-500'}`}>
                          {result.hasAudio ? '‚úÖ Available' : '‚ùå Not stored'}
                        </span>
                      </div>
                    </div>

                    <div className="mt-4 space-y-2">
                      <button
                        onClick={() => downloadTranscription(result)}
                        className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition-colors"
                      >
                        üì• Download Text
                      </button>
                      
                      <Link href={`/validation?id=${result.id}`} className="block w-full bg-gray-100 hover:bg-gray-200 text-gray-700 py-2 px-4 rounded-lg text-sm font-medium text-center transition-colors">
                        üëÅÔ∏è View Details
                      </Link>
                    </div>
                  </div>

                  {/* Right: Transcription text */}
                  <div className="lg:col-span-2">
                    <h4 className="font-medium text-gray-900 mb-3">Final Transcription:</h4>
                    <div className="bg-gray-50 rounded-lg p-4 max-h-48 overflow-y-auto">
                      <p className="text-sm leading-relaxed text-gray-800">
                        {result.finalText || result.originalText || 'No transcription available'}
                      </p>
                    </div>
                    
                    {result.originalText && result.finalText && result.originalText !== result.finalText && (
                      <details className="mt-3">
                        <summary className="text-sm text-gray-600 cursor-pointer hover:text-gray-800">
                          Show original transcription
                        </summary>
                        <div className="bg-yellow-50 rounded-lg p-3 mt-2">
                          <p className="text-sm text-gray-700">
                            {result.originalText}
                          </p>
                        </div>
                      </details>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Navigation */}
        <div className="mt-8 text-center">
          <div className="space-x-4">
            <Link href="/" className="text-gray-600 hover:text-gray-800 underline">
              ‚Üê Back to Home
            </Link>
            <Link href="/upload" className="text-blue-600 hover:text-blue-800 underline">
              Upload New Audio ‚Üí
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}